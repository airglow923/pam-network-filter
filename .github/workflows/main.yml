name: Main

on:
  push:
    branches: ["main", "debug"]
    paths:
      - "**.sh"
      - "**.rs"
      - "**.cc"
      - "**/Cargo.toml"
      - "**/CMakeLists.txt"
      - ".github/workflows/**"
      - "**/Containerfile"
  pull_request:
    branches: ["main", "debug"]
    paths:
      - "**.sh"
      - "**.rs"
      - "**.cc"
      - "**/Cargo.toml"
      - "**/CMakeLists.txt"
      - ".github/workflows/**"
      - "**/Containerfile"

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: Build and run tests
    runs-on: ubuntu-latest
    env:
      NAME_REPO: pam-network-filter

    steps:
      - uses: actions/checkout@v5

      - name: Update packages
        run: sudo apt-get update

      - name: Install dependencies
        run: |
          sudo apt-get install -y --fix-missing \
            libpam0g-dev libgtest-dev libclang-dev cmake

      - name: Install Rust
        run: |
          which cargo && true || \
            curl --proto '=https' --tlsv1.2 -sSf \
                https://sh.rustup.rs | sh -s - -y && \
            . "$HOME/.cargo/env"

      - name: Build library - Debug
        run: cargo build --verbose

      - name: Run tests
        run: $GITHUB_WORKSPACE/test.sh --verbose

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Build, create and run container
        working-directory: ${{ github.workspace }}/tests/integration
        run: |
          docker build -t $NAME_REPO -f Containerfile .
          docker create --name $NAME_REPO $NAME_REPO
          docker start $NAME_REPO

      - name: Build library - Release
        run: cargo build --release --verbose

      - name: Copy files for testing
        working-directory: ${{ github.workspace }}
        run: |
          docker cp \
            target/release/libpam_network_filter.so \
            $NAME_REPO:/usr/lib/security/pam_network_filter.so

      - name: Run integration tests
        run: docker exec $NAME_REPO /test.sh
